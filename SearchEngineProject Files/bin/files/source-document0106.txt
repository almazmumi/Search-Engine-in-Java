In computability theory, the halting problem is the problem of determining, from a description of an arbitrary computer program and an input, whether the program will finish running or continue to run forever. Alan Turing proved in 1936 that a general algorithm to solve the halting problem for all possible program-input pairs cannot exist. A key part of the proof was a mathematical definition of a computer and program, which became known as a Turing machine; the halting problem is undecidable over Turing machines. It is one of the first examples of a decision problem. Jack Copeland (2004) attributes the term halting problem to Martin Davis.The halting problem is a decision problem about properties of computer programs on a fixed Turing-complete model of computation, i.e. all programs that can be written in some given programming language that is general enough to be equivalent to a Turing machine. The problem is to determine, given a program and an input to the program, whether the program will eventually halt when run with that input. In this abstract framework, there are no resource limitations on the amount of memory or time required for the program's execution; it can take arbitrarily long, and use arbitrarily much storage space, before halting. The question is simply whether the given program will ever halt on a particular input. For example, in pseudocode, the program: while (true) continue does not halt; rather, it goes on forever in an infinite loop. On the other hand, the program print "Hello, world!" does halt. While deciding whether these programs halt is simple, more complex programs prove problematic. One approach to the problem might be to run the program for some number of steps and check if it halts. But if the program does not halt, it is unknown whether the program will eventually halt or run forever. Turing proved no algorithm can exist which will always correctly decide whether, for a given arbitrary program and its input, the program halts when run with that input; the essence of Turing's proof is that any such algorithm can be made to contradict itself, and therefore cannot be correct. Importance and consequences[edit] The halting problem is historically important because it was one of the first problems to be proved undecidable. (Turing's proof went to press in May 1936, whereas Alonzo Church's proof of the undecidability of a problem in the lambda calculus had already been published in April 1936.) Subsequently, many other undecidable problems have been described; the typical method of proving a problem to be undecidable is with the technique of reduction. To do this, it is sufficient to show that if a solution to the new problem were found, it could be used to decide an undecidable problem by transforming instances of the undecidable problem into instances of the new problem. Since we already know that no method can decide the old problem, no method can decide the new problem either. Often the new problem is reduced to solving the halting problem. (Note: the same technique is used to demonstrate that a problem is NP complete, only in this case, rather than demonstrating that there is no solution, it demonstrates there is no polynomial time solution, assuming P ≠ NP). For example, one such consequence of the halting problem's undecidability is that there cannot be a general algorithm that decides whether a given statement about natural numbers is true or not. The reason for this is that the proposition stating that a certain program will halt given a certain input can be converted into an equivalent statement about natural numbers. If we had an algorithm that could solve every statement about natural numbers, it could certainly solve this one; but that would determine whether the original program halts, which is impossible, since the halting problem is undecidable. Rice's theorem generalizes the theorem that the halting problem is unsolvable. It states that for any non-trivial property, there is no general decision procedure that, for all programs, decides whether the partial function implemented by the input program has that property. (A partial function is a function which may not always produce a result, and so is used to model programs, which can either produce results or fail to halt.) For example, the property "halt for the input 0" is undecidable. Here, "non-trivial" means that the set of partial functions that satisfy the property is neither the empty set nor the set of all partial functions. For example, "halts or fails to halt on input 0" is clearly true of all partial functions, so it is a trivial property, and can be decided by an algorithm that simply reports "true." Also, note that this theorem holds only for properties of the partial function implemented by the program; Rice's Theorem does not apply to properties of the program itself. For example, "halt on input 0 within 100 steps" is not a property of the partial function that is implemented by the program—it is a property of the program implementing the partial function and is very much decidable. Gregory Chaitin has defined a halting probability, represented by the symbol Ω, a type of real number that informally is said to represent the probability that a randomly produced program halts. These numbers have the same Turing degree as the halting problem. It is a normal and transcendental number which can be defined but cannot be completely computed. This means one can prove that there is no algorithm which produces the digits of Ω, although its first few digits can be calculated in simple cases. While Turing's proof shows that there can be no general method or algorithm to determine whether algorithms halt, individual instances of that problem may very well be susceptible to attack. Given a specific algorithm, one can often show that it must halt for any input, and in fact computer scientists often do just that as part of a correctness proof. But each proof has to be developed specifically for the algorithm at hand; there is no mechanical, general way to determine whether algorithms on a Turing machinThe Lahore Fort, locally referred to as Shahi Qila is citadel of the city of Lahore, Punjab, Pakistan. It is located in the northwestern corner of the Walled City of Lahore in Iqbal Park which is one of the largest urban parks in Pakistan. The trapezoidal composition is spread over 20 hectares. Origins of the fort go as far back as antiquity, however, the existing base structure was built during the reign of Mughal Emperor Akbar between 1556�1605 and was regularly upgraded by subsequent Mughal, Sikh and British rulers. It has two gates one is known as Alamgiri Gate build by Emperor Aurangzeb which opens towards Badshahi Mosque and other older one known as Maseeti (Punjabi language word means of Masjid) or Masjidi Gate which opens towards Masti Gate Area of Walled City and was built by Emperor Akbar. Currently Alamgiri Gate is used as the principal entrance while Masti Gate is permanently closed .The fort manifests the rich traditions of Mughal architecture. Some of the famous sites inside the fort include: Sheesh Mahal, Alamgiri Gate, Naulakha pavilion, and Moti Masjid. In 1981, the fort was inscribed as a UNESCO World Heritage Site along with the Shalimar Gardens. The origins of Lahore Fort are obscure and are traditionally based on various myths. However, during the excavation carried out in 1959 by the Department of Archaeology, in front of Diwan-e-Aam, a gold coin of Mahmood of Ghazni dated AH 416 (1025 AD) was found at a depth of 7.62 metres from the level of the lawns. Cultural layers continued to a further depth of 5 metres, giving strong indications that people had lived here long before the conquest of Lahore by Mahmood in 1021 AD. Further mention of the fort is traceable to Shahab-ud-din Muhammad Ghuri's successive invasions of Lahore from 1180 to 1186 AD. In 1758, the fort was captured by the Maratha forces under Raghunathrao. Then the Bhangi Sikh Dynasty (1716�1810), one of the 12 Sikh Kingdoms (Misl) of Punjab ruled Lahore City from 1760s until 1799 and expanded the City of Lahore. When Ranjit Singh, another Sikh chief from theGujranwala area took Lahore from the Bhangi Misl the Lahore Fort fell to Ranjit Singh and in 1801 he was crowned as the emperor of all of the Punjab. Lahore Fort and the city from (1799�1849) remained under the control of Maharaja Ranjit Singh, Sher-e-Panjab, and his sons, grandsons and wives, until the fall of the last Sikh empire or the Lahore Darbar in 1849.e halt. However, there are some heuristics that can be used in an automated fashion to attempt to construct a proof, which succeed frequently on typical programs. This field of research is known as automated termination analysis. Since the negative answer to the halting problem shows that there are problems that cannot be solved by a Turing machine, the Church–Turing thesis limits what can be accomplished by any machine that implements effective methods. However, not all machines conceivable to human imagination are subject to the Church–Turing thesis (e.g. oracle machines). It is an open question whether there can be actual deterministic physical processes that, in the long run, elude simulation by a Turing machine, and in particular whether any such hypothetical process could usefully be harnessed in the form of a calculating machine (a hypercomputer) that could solve the halting problem for a Turing machine amongst other things. It is also an open question whether any such unknown physical processes are involved in the working of the human brain, and whether humans can solve the halting problem 